// Code generated by MockGen. DO NOT EDIT.
// Source: ./llm.go
//
// Generated by this command:
//
//	mockgen -source=./llm.go -destination=../../../mocks/llm.mock.go -package=aimocks -typed=true Service
//
// Package aimocks is a generated GoMock package.
package aimocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/ai/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockService) Invoke(ctx context.Context, req domain.LLMRequest) (domain.LLMResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", ctx, req)
	ret0, _ := ret[0].(domain.LLMResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockServiceMockRecorder) Invoke(ctx, req any) *ServiceInvokeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockService)(nil).Invoke), ctx, req)
	return &ServiceInvokeCall{Call: call}
}

// ServiceInvokeCall wrap *gomock.Call
type ServiceInvokeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceInvokeCall) Return(arg0 domain.LLMResponse, arg1 error) *ServiceInvokeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceInvokeCall) Do(f func(context.Context, domain.LLMRequest) (domain.LLMResponse, error)) *ServiceInvokeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceInvokeCall) DoAndReturn(f func(context.Context, domain.LLMRequest) (domain.LLMResponse, error)) *ServiceInvokeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
