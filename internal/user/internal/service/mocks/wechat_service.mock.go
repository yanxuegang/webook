// Code generated by MockGen. DO NOT EDIT.
// Source: ./wechat_service.go
//
// Generated by this command:
//
//	mockgen -source=./wechat_service.go -package=svcmocks -typed=true -destination=mocks/wechat_service.mock.go OAuth2Service
//
// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/user/internal/domain"
	service "github.com/ecodeclub/webook/internal/user/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockOAuth2Service is a mock of OAuth2Service interface.
type MockOAuth2Service struct {
	ctrl     *gomock.Controller
	recorder *MockOAuth2ServiceMockRecorder
}

// MockOAuth2ServiceMockRecorder is the mock recorder for MockOAuth2Service.
type MockOAuth2ServiceMockRecorder struct {
	mock *MockOAuth2Service
}

// NewMockOAuth2Service creates a new mock instance.
func NewMockOAuth2Service(ctrl *gomock.Controller) *MockOAuth2Service {
	mock := &MockOAuth2Service{ctrl: ctrl}
	mock.recorder = &MockOAuth2ServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuth2Service) EXPECT() *MockOAuth2ServiceMockRecorder {
	return m.recorder
}

// AuthURL mocks base method.
func (m *MockOAuth2Service) AuthURL(ctx context.Context, a service.AuthParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthURL", ctx, a)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthURL indicates an expected call of AuthURL.
func (mr *MockOAuth2ServiceMockRecorder) AuthURL(ctx, a any) *OAuth2ServiceAuthURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthURL", reflect.TypeOf((*MockOAuth2Service)(nil).AuthURL), ctx, a)
	return &OAuth2ServiceAuthURLCall{Call: call}
}

// OAuth2ServiceAuthURLCall wrap *gomock.Call
type OAuth2ServiceAuthURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *OAuth2ServiceAuthURLCall) Return(arg0 string, arg1 error) *OAuth2ServiceAuthURLCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *OAuth2ServiceAuthURLCall) Do(f func(context.Context, service.AuthParams) (string, error)) *OAuth2ServiceAuthURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *OAuth2ServiceAuthURLCall) DoAndReturn(f func(context.Context, service.AuthParams) (string, error)) *OAuth2ServiceAuthURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Verify mocks base method.
func (m *MockOAuth2Service) Verify(ctx context.Context, c service.CallbackParams) (domain.WechatInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, c)
	ret0, _ := ret[0].(domain.WechatInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockOAuth2ServiceMockRecorder) Verify(ctx, c any) *OAuth2ServiceVerifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockOAuth2Service)(nil).Verify), ctx, c)
	return &OAuth2ServiceVerifyCall{Call: call}
}

// OAuth2ServiceVerifyCall wrap *gomock.Call
type OAuth2ServiceVerifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *OAuth2ServiceVerifyCall) Return(arg0 domain.WechatInfo, arg1 error) *OAuth2ServiceVerifyCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *OAuth2ServiceVerifyCall) Do(f func(context.Context, service.CallbackParams) (domain.WechatInfo, error)) *OAuth2ServiceVerifyCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *OAuth2ServiceVerifyCall) DoAndReturn(f func(context.Context, service.CallbackParams) (domain.WechatInfo, error)) *OAuth2ServiceVerifyCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}
